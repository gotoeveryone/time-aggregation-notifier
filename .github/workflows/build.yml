name: Build

on: [push]

jobs:
  code_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up Golang
        uses: actions/setup-go@v1
        with:
          go-version: 1.19

      - name: Use Cache
        uses: actions/cache@v2
        id: app_cache
        with:
          path: ~/go/pkg/mod
          key: ${{ env.cache-version }}-${{ runner.OS }}-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        if: steps.app_cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Execute code check
        run: go vet ./...

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up Golang
        uses: actions/setup-go@v1
        with:
          go-version: 1.19

      - name: Use Cache
        uses: actions/cache@v2
        id: app_cache
        with:
          path: ~/go/pkg/mod
          key: ${{ env.cache-version }}-${{ runner.OS }}-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        if: steps.app_cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Execute code check
        run: go test ./...

  deploy:
    if: contains(github.ref, 'tags/v')
    needs:
      - code_check
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Set up Golang
        uses: actions/setup-go@v1
        with:
          go-version: 1.19

      - name: Use Cache
        uses: actions/cache@v2
        id: app_cache
        with:
          path: ~/go/pkg/mod
          key: ${{ env.cache-version }}-${{ runner.OS }}-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        if: steps.app_cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Build
        env:
          GOOS: linux
          GOARCH: amd64
        run: go build -o deploy/time-aggregation-notifier ./src/main.go

      - name: Generate config file
        run: |
          cat deploy/function.json.example | \
          jq -r ".Role=\"${{ secrets.IAM_ROLE_ARN }}\"" | \
          jq -r ".Environment.Variables.IDENTIFIER=\"${{ secrets.IDENTIFIER }}\"" | \
          jq -r ".Environment.Variables.GROUPING_NAME=\"${{ secrets.GROUPING_NAME }}\"" > deploy/function.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - uses: fujiwara/lambroll@v0
        with:
          version: v0.12.7

      - name: Deploy
        working-directory: deploy
        run: lambroll deploy

  notify_slack:
    if: ${{ always() && contains(github.ref, 'tags/v') }}
    needs:
      - deploy
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: Notify to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          author_name: GitHub Actions
          fields: repo,message,author,ref
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.NOTIFY_SLACK_WEBHOOK_URL }}
